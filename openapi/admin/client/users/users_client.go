// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BlockAdminUser(params *BlockAdminUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BlockAdminUserNoContent, error)

	GetAdminUserByID(params *GetAdminUserByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminUserByIDOK, error)

	GetAdminUsers(params *GetAdminUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminUsersOK, error)

	UpdateAdminUserRole(params *UpdateAdminUserRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminUserRoleNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BlockAdminUser block admin user API
*/
func (a *Client) BlockAdminUser(params *BlockAdminUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BlockAdminUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBlockAdminUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "blockAdminUser",
		Method:             "DELETE",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BlockAdminUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BlockAdminUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BlockAdminUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAdminUserByID get admin user by Id API
*/
func (a *Client) GetAdminUserByID(params *GetAdminUserByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminUserByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminUserByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdminUserById",
		Method:             "GET",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAdminUserByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminUserByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdminUserByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAdminUsers get admin users API
*/
func (a *Client) GetAdminUsers(params *GetAdminUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdminUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAdminUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdminUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAdminUserRole update admin user role API
*/
func (a *Client) UpdateAdminUserRole(params *UpdateAdminUserRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminUserRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdminUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAdminUserRole",
		Method:             "PATCH",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAdminUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdminUserRoleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAdminUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
