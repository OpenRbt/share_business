// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wash servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wash servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignServerToGroup(params *AssignServerToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignServerToGroupNoContent, error)

	CreateWashServer(params *CreateWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWashServerOK, error)

	DeleteWashServer(params *DeleteWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWashServerNoContent, error)

	GetWashServerByID(params *GetWashServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashServerByIDOK, error)

	GetWashServers(params *GetWashServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashServersOK, error)

	UpdateWashServer(params *UpdateWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWashServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssignServerToGroup assign server to group API
*/
func (a *Client) AssignServerToGroup(params *AssignServerToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignServerToGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignServerToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignServerToGroup",
		Method:             "POST",
		PathPattern:        "/server-groups/{groupId}/wash-servers/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignServerToGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignServerToGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignServerToGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateWashServer create wash server API
*/
func (a *Client) CreateWashServer(params *CreateWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWashServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWashServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWashServer",
		Method:             "POST",
		PathPattern:        "/wash-servers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWashServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWashServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateWashServerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWashServer delete wash server API
*/
func (a *Client) DeleteWashServer(params *DeleteWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWashServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWashServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWashServer",
		Method:             "DELETE",
		PathPattern:        "/wash-servers/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWashServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWashServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWashServerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWashServerByID get wash server by Id API
*/
func (a *Client) GetWashServerByID(params *GetWashServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashServerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWashServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWashServerById",
		Method:             "GET",
		PathPattern:        "/wash-servers/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWashServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWashServerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWashServerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWashServers get wash servers API
*/
func (a *Client) GetWashServers(params *GetWashServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWashServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWashServers",
		Method:             "GET",
		PathPattern:        "/wash-servers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWashServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWashServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWashServersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWashServer update wash server API
*/
func (a *Client) UpdateWashServer(params *UpdateWashServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWashServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWashServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWashServer",
		Method:             "PATCH",
		PathPattern:        "/wash-servers/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWashServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWashServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWashServerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
