// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"washbonus/internal/app"
	"washbonus/openapi/admin/models"
)

// UpdateAdminUserRoleHandlerFunc turns a function with the right signature into a update admin user role handler
type UpdateAdminUserRoleHandlerFunc func(UpdateAdminUserRoleParams, *app.AdminAuth) UpdateAdminUserRoleResponder

// Handle executing the request and returning a response
func (fn UpdateAdminUserRoleHandlerFunc) Handle(params UpdateAdminUserRoleParams, principal *app.AdminAuth) UpdateAdminUserRoleResponder {
	return fn(params, principal)
}

// UpdateAdminUserRoleHandler interface for that can handle valid update admin user role params
type UpdateAdminUserRoleHandler interface {
	Handle(UpdateAdminUserRoleParams, *app.AdminAuth) UpdateAdminUserRoleResponder
}

// NewUpdateAdminUserRole creates a new http.Handler for the update admin user role operation
func NewUpdateAdminUserRole(ctx *middleware.Context, handler UpdateAdminUserRoleHandler) *UpdateAdminUserRole {
	return &UpdateAdminUserRole{Context: ctx, Handler: handler}
}

/*
	UpdateAdminUserRole swagger:route PATCH /users/{userId} users updateAdminUserRole

UpdateAdminUserRole update admin user role API
*/
type UpdateAdminUserRole struct {
	Context *middleware.Context
	Handler UpdateAdminUserRoleHandler
}

func (o *UpdateAdminUserRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateAdminUserRoleParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateAdminUserRoleBody update admin user role body
//
// swagger:model UpdateAdminUserRoleBody
type UpdateAdminUserRoleBody struct {

	// role
	Role models.AdminUserRole `json:"role,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *UpdateAdminUserRoleBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// role
		Role models.AdminUserRole `json:"role,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Role = props.Role
	return nil
}

// Validate validates this update admin user role body
func (o *UpdateAdminUserRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAdminUserRoleBody) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	if err := o.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "role")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update admin user role body based on the context it is used
func (o *UpdateAdminUserRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAdminUserRoleBody) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	if err := o.Role.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "role")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAdminUserRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAdminUserRoleBody) UnmarshalBinary(b []byte) error {
	var res UpdateAdminUserRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
