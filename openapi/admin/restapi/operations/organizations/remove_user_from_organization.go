// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"washbonus/internal/app"
)

// RemoveUserFromOrganizationHandlerFunc turns a function with the right signature into a remove user from organization handler
type RemoveUserFromOrganizationHandlerFunc func(RemoveUserFromOrganizationParams, *app.AdminAuth) RemoveUserFromOrganizationResponder

// Handle executing the request and returning a response
func (fn RemoveUserFromOrganizationHandlerFunc) Handle(params RemoveUserFromOrganizationParams, principal *app.AdminAuth) RemoveUserFromOrganizationResponder {
	return fn(params, principal)
}

// RemoveUserFromOrganizationHandler interface for that can handle valid remove user from organization params
type RemoveUserFromOrganizationHandler interface {
	Handle(RemoveUserFromOrganizationParams, *app.AdminAuth) RemoveUserFromOrganizationResponder
}

// NewRemoveUserFromOrganization creates a new http.Handler for the remove user from organization operation
func NewRemoveUserFromOrganization(ctx *middleware.Context, handler RemoveUserFromOrganizationHandler) *RemoveUserFromOrganization {
	return &RemoveUserFromOrganization{Context: ctx, Handler: handler}
}

/*
	RemoveUserFromOrganization swagger:route DELETE /organizations/{organizationId}/users/{userId} organizations removeUserFromOrganization

RemoveUserFromOrganization remove user from organization API
*/
type RemoveUserFromOrganization struct {
	Context *middleware.Context
	Handler RemoveUserFromOrganizationHandler
}

func (o *RemoveUserFromOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRemoveUserFromOrganizationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
