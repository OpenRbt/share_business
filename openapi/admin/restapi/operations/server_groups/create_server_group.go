// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"washbonus/internal/app"
)

// CreateServerGroupHandlerFunc turns a function with the right signature into a create server group handler
type CreateServerGroupHandlerFunc func(CreateServerGroupParams, *app.AdminAuth) CreateServerGroupResponder

// Handle executing the request and returning a response
func (fn CreateServerGroupHandlerFunc) Handle(params CreateServerGroupParams, principal *app.AdminAuth) CreateServerGroupResponder {
	return fn(params, principal)
}

// CreateServerGroupHandler interface for that can handle valid create server group params
type CreateServerGroupHandler interface {
	Handle(CreateServerGroupParams, *app.AdminAuth) CreateServerGroupResponder
}

// NewCreateServerGroup creates a new http.Handler for the create server group operation
func NewCreateServerGroup(ctx *middleware.Context, handler CreateServerGroupHandler) *CreateServerGroup {
	return &CreateServerGroup{Context: ctx, Handler: handler}
}

/*
	CreateServerGroup swagger:route POST /server-groups serverGroups createServerGroup

CreateServerGroup create server group API
*/
type CreateServerGroup struct {
	Context *middleware.Context
	Handler CreateServerGroupHandler
}

func (o *CreateServerGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateServerGroupParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
