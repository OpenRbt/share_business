// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"washbonus/internal/app"
)

// ReviewAdminApplicationHandlerFunc turns a function with the right signature into a review admin application handler
type ReviewAdminApplicationHandlerFunc func(ReviewAdminApplicationParams, *app.AdminAuth) ReviewAdminApplicationResponder

// Handle executing the request and returning a response
func (fn ReviewAdminApplicationHandlerFunc) Handle(params ReviewAdminApplicationParams, principal *app.AdminAuth) ReviewAdminApplicationResponder {
	return fn(params, principal)
}

// ReviewAdminApplicationHandler interface for that can handle valid review admin application params
type ReviewAdminApplicationHandler interface {
	Handle(ReviewAdminApplicationParams, *app.AdminAuth) ReviewAdminApplicationResponder
}

// NewReviewAdminApplication creates a new http.Handler for the review admin application operation
func NewReviewAdminApplication(ctx *middleware.Context, handler ReviewAdminApplicationHandler) *ReviewAdminApplication {
	return &ReviewAdminApplication{Context: ctx, Handler: handler}
}

/*
	ReviewAdminApplication swagger:route POST /users/applications/{id} applications reviewAdminApplication

ReviewAdminApplication review admin application API
*/
type ReviewAdminApplication struct {
	Context *middleware.Context
	Handler ReviewAdminApplicationHandler
}

func (o *ReviewAdminApplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReviewAdminApplicationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
