// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"washbonus/openapi/admin/models"
)

// CreateAdminApplicationHandlerFunc turns a function with the right signature into a create admin application handler
type CreateAdminApplicationHandlerFunc func(CreateAdminApplicationParams) CreateAdminApplicationResponder

// Handle executing the request and returning a response
func (fn CreateAdminApplicationHandlerFunc) Handle(params CreateAdminApplicationParams) CreateAdminApplicationResponder {
	return fn(params)
}

// CreateAdminApplicationHandler interface for that can handle valid create admin application params
type CreateAdminApplicationHandler interface {
	Handle(CreateAdminApplicationParams) CreateAdminApplicationResponder
}

// NewCreateAdminApplication creates a new http.Handler for the create admin application operation
func NewCreateAdminApplication(ctx *middleware.Context, handler CreateAdminApplicationHandler) *CreateAdminApplication {
	return &CreateAdminApplication{Context: ctx, Handler: handler}
}

/* CreateAdminApplication swagger:route POST /users/applications applications createAdminApplication

CreateAdminApplication create admin application API

*/
type CreateAdminApplication struct {
	Context *middleware.Context
	Handler CreateAdminApplicationHandler
}

func (o *CreateAdminApplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateAdminApplicationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateAdminApplicationBody create admin application body
//
// swagger:model CreateAdminApplicationBody
type CreateAdminApplicationBody struct {

	// application
	Application *models.AdminApplicationCreation `json:"application,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *CreateAdminApplicationBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// application
		Application *models.AdminApplicationCreation `json:"application,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Application = props.Application
	return nil
}

// Validate validates this create admin application body
func (o *CreateAdminApplicationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateAdminApplicationBody) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(o.Application) { // not required
		return nil
	}

	if o.Application != nil {
		if err := o.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "application")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create admin application body based on the context it is used
func (o *CreateAdminApplicationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateAdminApplicationBody) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if o.Application != nil {
		if err := o.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "application")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateAdminApplicationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateAdminApplicationBody) UnmarshalBinary(b []byte) error {
	var res CreateAdminApplicationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
