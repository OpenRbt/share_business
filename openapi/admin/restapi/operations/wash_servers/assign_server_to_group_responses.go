// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washbonus/openapi/admin/models"
)

// AssignServerToGroupNoContentCode is the HTTP code returned for type AssignServerToGroupNoContent
const AssignServerToGroupNoContentCode int = 204

/*AssignServerToGroupNoContent OK

swagger:response assignServerToGroupNoContent
*/
type AssignServerToGroupNoContent struct {
}

// NewAssignServerToGroupNoContent creates AssignServerToGroupNoContent with default headers values
func NewAssignServerToGroupNoContent() *AssignServerToGroupNoContent {

	return &AssignServerToGroupNoContent{}
}

// WriteResponse to the client
func (o *AssignServerToGroupNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *AssignServerToGroupNoContent) AssignServerToGroupResponder() {}

/*AssignServerToGroupDefault Generic error response

swagger:response assignServerToGroupDefault
*/
type AssignServerToGroupDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAssignServerToGroupDefault creates AssignServerToGroupDefault with default headers values
func NewAssignServerToGroupDefault(code int) *AssignServerToGroupDefault {
	if code <= 0 {
		code = 500
	}

	return &AssignServerToGroupDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the assign server to group default response
func (o *AssignServerToGroupDefault) WithStatusCode(code int) *AssignServerToGroupDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the assign server to group default response
func (o *AssignServerToGroupDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the assign server to group default response
func (o *AssignServerToGroupDefault) WithPayload(payload *models.Error) *AssignServerToGroupDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign server to group default response
func (o *AssignServerToGroupDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignServerToGroupDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AssignServerToGroupDefault) AssignServerToGroupResponder() {}

type AssignServerToGroupNotImplementedResponder struct {
	middleware.Responder
}

func (*AssignServerToGroupNotImplementedResponder) AssignServerToGroupResponder() {}

func AssignServerToGroupNotImplemented() AssignServerToGroupResponder {
	return &AssignServerToGroupNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.AssignServerToGroup has not yet been implemented",
		),
	}
}

type AssignServerToGroupResponder interface {
	middleware.Responder
	AssignServerToGroupResponder()
}
