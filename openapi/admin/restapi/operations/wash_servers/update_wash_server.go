// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"washbonus/internal/app"
)

// UpdateWashServerHandlerFunc turns a function with the right signature into a update wash server handler
type UpdateWashServerHandlerFunc func(UpdateWashServerParams, *app.AdminAuth) UpdateWashServerResponder

// Handle executing the request and returning a response
func (fn UpdateWashServerHandlerFunc) Handle(params UpdateWashServerParams, principal *app.AdminAuth) UpdateWashServerResponder {
	return fn(params, principal)
}

// UpdateWashServerHandler interface for that can handle valid update wash server params
type UpdateWashServerHandler interface {
	Handle(UpdateWashServerParams, *app.AdminAuth) UpdateWashServerResponder
}

// NewUpdateWashServer creates a new http.Handler for the update wash server operation
func NewUpdateWashServer(ctx *middleware.Context, handler UpdateWashServerHandler) *UpdateWashServer {
	return &UpdateWashServer{Context: ctx, Handler: handler}
}

/*
	UpdateWashServer swagger:route PATCH /wash-servers/{serverId} washServers updateWashServer

UpdateWashServer update wash server API
*/
type UpdateWashServer struct {
	Context *middleware.Context
	Handler UpdateWashServerHandler
}

func (o *UpdateWashServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateWashServerParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
