// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetBonusReportsParams creates a new GetBonusReportsParams object
// with the default values initialized.
func NewGetBonusReportsParams() GetBonusReportsParams {

	var (
		// initialize parameters with default values

		pageDefault     = int64(1)
		pageSizeDefault = int64(10)
	)

	return GetBonusReportsParams{
		Page: &pageDefault,

		PageSize: &pageSizeDefault,
	}
}

// GetBonusReportsParams contains all the bound params for the get bonus reports operation
// typically these are obtained from a http.Request
//
// swagger:parameters getBonusReports
type GetBonusReportsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Operation *string
	/*
	  In: query
	*/
	OrganizationID *strfmt.UUID
	/*
	  Minimum: 1
	  In: query
	  Default: 1
	*/
	Page *int64
	/*
	  Maximum: 100
	  Minimum: 1
	  In: query
	  Default: 10
	*/
	PageSize *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBonusReportsParams() beforehand.
func (o *GetBonusReportsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qOperation, qhkOperation, _ := qs.GetOK("operation")
	if err := o.bindOperation(qOperation, qhkOperation, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrganizationID, qhkOrganizationID, _ := qs.GetOK("organizationId")
	if err := o.bindOrganizationID(qOrganizationID, qhkOrganizationID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOperation binds and validates parameter Operation from query.
func (o *GetBonusReportsParams) bindOperation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Operation = &raw

	if err := o.validateOperation(formats); err != nil {
		return err
	}

	return nil
}

// validateOperation carries on validations for parameter Operation
func (o *GetBonusReportsParams) validateOperation(formats strfmt.Registry) error {

	if err := validate.EnumCase("operation", "query", *o.Operation, []interface{}{"deposit", "withdrawal"}, true); err != nil {
		return err
	}

	return nil
}

// bindOrganizationID binds and validates parameter OrganizationID from query.
func (o *GetBonusReportsParams) bindOrganizationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("organizationId", "query", "strfmt.UUID", raw)
	}
	o.OrganizationID = (value.(*strfmt.UUID))

	if err := o.validateOrganizationID(formats); err != nil {
		return err
	}

	return nil
}

// validateOrganizationID carries on validations for parameter OrganizationID
func (o *GetBonusReportsParams) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.FormatOf("organizationId", "query", "uuid", o.OrganizationID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetBonusReportsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBonusReportsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	if err := o.validatePage(formats); err != nil {
		return err
	}

	return nil
}

// validatePage carries on validations for parameter Page
func (o *GetBonusReportsParams) validatePage(formats strfmt.Registry) error {

	if err := validate.MinimumInt("page", "query", *o.Page, 1, false); err != nil {
		return err
	}

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetBonusReportsParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBonusReportsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *GetBonusReportsParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.MinimumInt("pageSize", "query", *o.PageSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "query", *o.PageSize, 100, false); err != nil {
		return err
	}

	return nil
}
