// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"washbonus/internal/app"
)

// GetBonusReportsHandlerFunc turns a function with the right signature into a get bonus reports handler
type GetBonusReportsHandlerFunc func(GetBonusReportsParams, *app.AdminAuth) GetBonusReportsResponder

// Handle executing the request and returning a response
func (fn GetBonusReportsHandlerFunc) Handle(params GetBonusReportsParams, principal *app.AdminAuth) GetBonusReportsResponder {
	return fn(params, principal)
}

// GetBonusReportsHandler interface for that can handle valid get bonus reports params
type GetBonusReportsHandler interface {
	Handle(GetBonusReportsParams, *app.AdminAuth) GetBonusReportsResponder
}

// NewGetBonusReports creates a new http.Handler for the get bonus reports operation
func NewGetBonusReports(ctx *middleware.Context, handler GetBonusReportsHandler) *GetBonusReports {
	return &GetBonusReports{Context: ctx, Handler: handler}
}

/*
	GetBonusReports swagger:route GET /reports/bonus reports getBonusReports

GetBonusReports get bonus reports API
*/
type GetBonusReports struct {
	Context *middleware.Context
	Handler GetBonusReportsHandler
}

func (o *GetBonusReports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBonusReportsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.AdminAuth
	if uprinc != nil {
		principal = uprinc.(*app.AdminAuth) // this is really a app.AdminAuth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
