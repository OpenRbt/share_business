// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportPage report page
//
// swagger:model ReportPage
type ReportPage struct {

	// items
	// Required: true
	Items []*Report `json:"items"`

	// page
	// Required: true
	// Minimum: 1
	Page *int64 `json:"page"`

	// page size
	// Required: true
	// Maximum: 100
	// Minimum: 1
	PageSize *int64 `json:"pageSize"`

	// total items
	// Required: true
	// Minimum: 0
	TotalItems *int64 `json:"totalItems"`

	// total pages
	// Required: true
	// Minimum: 0
	TotalPages *int64 `json:"totalPages"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ReportPage) UnmarshalJSON(data []byte) error {
	var props struct {

		// items
		// Required: true
		Items []*Report `json:"items"`

		// page
		// Required: true
		// Minimum: 1
		Page *int64 `json:"page"`

		// page size
		// Required: true
		// Maximum: 100
		// Minimum: 1
		PageSize *int64 `json:"pageSize"`

		// total items
		// Required: true
		// Minimum: 0
		TotalItems *int64 `json:"totalItems"`

		// total pages
		// Required: true
		// Minimum: 0
		TotalPages *int64 `json:"totalPages"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Items = props.Items
	m.Page = props.Page
	m.PageSize = props.PageSize
	m.TotalItems = props.TotalItems
	m.TotalPages = props.TotalPages
	return nil
}

// Validate validates this report page
func (m *ReportPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportPage) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportPage) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", m.Page); err != nil {
		return err
	}

	if err := validate.MinimumInt("page", "body", *m.Page, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ReportPage) validatePageSize(formats strfmt.Registry) error {

	if err := validate.Required("pageSize", "body", m.PageSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("pageSize", "body", *m.PageSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "body", *m.PageSize, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ReportPage) validateTotalItems(formats strfmt.Registry) error {

	if err := validate.Required("totalItems", "body", m.TotalItems); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalItems", "body", *m.TotalItems, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ReportPage) validateTotalPages(formats strfmt.Registry) error {

	if err := validate.Required("totalPages", "body", m.TotalPages); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalPages", "body", *m.TotalPages, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this report page based on the context it is used
func (m *ReportPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportPage) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportPage) UnmarshalBinary(b []byte) error {
	var res ReportPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
