// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// AssignUserToSessionNoContentCode is the HTTP code returned for type AssignUserToSessionNoContent
const AssignUserToSessionNoContentCode int = 204

/*
AssignUserToSessionNoContent OK

swagger:response assignUserToSessionNoContent
*/
type AssignUserToSessionNoContent struct {
}

// NewAssignUserToSessionNoContent creates AssignUserToSessionNoContent with default headers values
func NewAssignUserToSessionNoContent() *AssignUserToSessionNoContent {

	return &AssignUserToSessionNoContent{}
}

// WriteResponse to the client
func (o *AssignUserToSessionNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *AssignUserToSessionNoContent) AssignUserToSessionResponder() {}

// AssignUserToSessionForbiddenCode is the HTTP code returned for type AssignUserToSessionForbidden
const AssignUserToSessionForbiddenCode int = 403

/*
AssignUserToSessionForbidden Forbidden

swagger:response assignUserToSessionForbidden
*/
type AssignUserToSessionForbidden struct {
}

// NewAssignUserToSessionForbidden creates AssignUserToSessionForbidden with default headers values
func NewAssignUserToSessionForbidden() *AssignUserToSessionForbidden {

	return &AssignUserToSessionForbidden{}
}

// WriteResponse to the client
func (o *AssignUserToSessionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

func (o *AssignUserToSessionForbidden) AssignUserToSessionResponder() {}

// AssignUserToSessionNotFoundCode is the HTTP code returned for type AssignUserToSessionNotFound
const AssignUserToSessionNotFoundCode int = 404

/*
AssignUserToSessionNotFound Session not found

swagger:response assignUserToSessionNotFound
*/
type AssignUserToSessionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAssignUserToSessionNotFound creates AssignUserToSessionNotFound with default headers values
func NewAssignUserToSessionNotFound() *AssignUserToSessionNotFound {

	return &AssignUserToSessionNotFound{}
}

// WithPayload adds the payload to the assign user to session not found response
func (o *AssignUserToSessionNotFound) WithPayload(payload *models.Error) *AssignUserToSessionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign user to session not found response
func (o *AssignUserToSessionNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignUserToSessionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AssignUserToSessionNotFound) AssignUserToSessionResponder() {}

// AssignUserToSessionInternalServerErrorCode is the HTTP code returned for type AssignUserToSessionInternalServerError
const AssignUserToSessionInternalServerErrorCode int = 500

/*
AssignUserToSessionInternalServerError Internal error

swagger:response assignUserToSessionInternalServerError
*/
type AssignUserToSessionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAssignUserToSessionInternalServerError creates AssignUserToSessionInternalServerError with default headers values
func NewAssignUserToSessionInternalServerError() *AssignUserToSessionInternalServerError {

	return &AssignUserToSessionInternalServerError{}
}

// WithPayload adds the payload to the assign user to session internal server error response
func (o *AssignUserToSessionInternalServerError) WithPayload(payload *models.Error) *AssignUserToSessionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign user to session internal server error response
func (o *AssignUserToSessionInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignUserToSessionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AssignUserToSessionInternalServerError) AssignUserToSessionResponder() {}

type AssignUserToSessionNotImplementedResponder struct {
	middleware.Responder
}

func (*AssignUserToSessionNotImplementedResponder) AssignUserToSessionResponder() {}

func AssignUserToSessionNotImplemented() AssignUserToSessionResponder {
	return &AssignUserToSessionNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.AssignUserToSession has not yet been implemented",
		),
	}
}

type AssignUserToSessionResponder interface {
	middleware.Responder
	AssignUserToSessionResponder()
}
