// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// UpdateUserNoContentCode is the HTTP code returned for type UpdateUserNoContent
const UpdateUserNoContentCode int = 204

/*
UpdateUserNoContent OK

swagger:response updateUserNoContent
*/
type UpdateUserNoContent struct {
}

// NewUpdateUserNoContent creates UpdateUserNoContent with default headers values
func NewUpdateUserNoContent() *UpdateUserNoContent {

	return &UpdateUserNoContent{}
}

// WriteResponse to the client
func (o *UpdateUserNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *UpdateUserNoContent) UpdateUserResponder() {}

// UpdateUserForbiddenCode is the HTTP code returned for type UpdateUserForbidden
const UpdateUserForbiddenCode int = 403

/*
UpdateUserForbidden Forbidden

swagger:response updateUserForbidden
*/
type UpdateUserForbidden struct {
}

// NewUpdateUserForbidden creates UpdateUserForbidden with default headers values
func NewUpdateUserForbidden() *UpdateUserForbidden {

	return &UpdateUserForbidden{}
}

// WriteResponse to the client
func (o *UpdateUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

func (o *UpdateUserForbidden) UpdateUserResponder() {}

// UpdateUserNotFoundCode is the HTTP code returned for type UpdateUserNotFound
const UpdateUserNotFoundCode int = 404

/*
UpdateUserNotFound Not found

swagger:response updateUserNotFound
*/
type UpdateUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateUserNotFound creates UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {

	return &UpdateUserNotFound{}
}

// WithPayload adds the payload to the update user not found response
func (o *UpdateUserNotFound) WithPayload(payload *models.Error) *UpdateUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user not found response
func (o *UpdateUserNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateUserNotFound) UpdateUserResponder() {}

// UpdateUserInternalServerErrorCode is the HTTP code returned for type UpdateUserInternalServerError
const UpdateUserInternalServerErrorCode int = 500

/*
UpdateUserInternalServerError Internal error

swagger:response updateUserInternalServerError
*/
type UpdateUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateUserInternalServerError creates UpdateUserInternalServerError with default headers values
func NewUpdateUserInternalServerError() *UpdateUserInternalServerError {

	return &UpdateUserInternalServerError{}
}

// WithPayload adds the payload to the update user internal server error response
func (o *UpdateUserInternalServerError) WithPayload(payload *models.Error) *UpdateUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user internal server error response
func (o *UpdateUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateUserInternalServerError) UpdateUserResponder() {}

type UpdateUserNotImplementedResponder struct {
	middleware.Responder
}

func (*UpdateUserNotImplementedResponder) UpdateUserResponder() {}

func UpdateUserNotImplemented() UpdateUserResponder {
	return &UpdateUserNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.UpdateUser has not yet been implemented",
		),
	}
}

type UpdateUserResponder interface {
	middleware.Responder
	UpdateUserResponder()
}
