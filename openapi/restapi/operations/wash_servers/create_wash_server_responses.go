// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// CreateWashServerOKCode is the HTTP code returned for type CreateWashServerOK
const CreateWashServerOKCode int = 200

/*
CreateWashServerOK Success creation

swagger:response createWashServerOK
*/
type CreateWashServerOK struct {

	/*
	  In: Body
	*/
	Payload *models.WashServer `json:"body,omitempty"`
}

// NewCreateWashServerOK creates CreateWashServerOK with default headers values
func NewCreateWashServerOK() *CreateWashServerOK {

	return &CreateWashServerOK{}
}

// WithPayload adds the payload to the create wash server o k response
func (o *CreateWashServerOK) WithPayload(payload *models.WashServer) *CreateWashServerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create wash server o k response
func (o *CreateWashServerOK) SetPayload(payload *models.WashServer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWashServerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateWashServerOK) CreateWashServerResponder() {}

// CreateWashServerBadRequestCode is the HTTP code returned for type CreateWashServerBadRequest
const CreateWashServerBadRequestCode int = 400

/*
CreateWashServerBadRequest Bad request

swagger:response createWashServerBadRequest
*/
type CreateWashServerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateWashServerBadRequest creates CreateWashServerBadRequest with default headers values
func NewCreateWashServerBadRequest() *CreateWashServerBadRequest {

	return &CreateWashServerBadRequest{}
}

// WithPayload adds the payload to the create wash server bad request response
func (o *CreateWashServerBadRequest) WithPayload(payload *models.Error) *CreateWashServerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create wash server bad request response
func (o *CreateWashServerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWashServerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateWashServerBadRequest) CreateWashServerResponder() {}

// CreateWashServerForbiddenCode is the HTTP code returned for type CreateWashServerForbidden
const CreateWashServerForbiddenCode int = 403

/*
CreateWashServerForbidden Forbidden

swagger:response createWashServerForbidden
*/
type CreateWashServerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateWashServerForbidden creates CreateWashServerForbidden with default headers values
func NewCreateWashServerForbidden() *CreateWashServerForbidden {

	return &CreateWashServerForbidden{}
}

// WithPayload adds the payload to the create wash server forbidden response
func (o *CreateWashServerForbidden) WithPayload(payload *models.Error) *CreateWashServerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create wash server forbidden response
func (o *CreateWashServerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWashServerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateWashServerForbidden) CreateWashServerResponder() {}

// CreateWashServerInternalServerErrorCode is the HTTP code returned for type CreateWashServerInternalServerError
const CreateWashServerInternalServerErrorCode int = 500

/*
CreateWashServerInternalServerError Internal error

swagger:response createWashServerInternalServerError
*/
type CreateWashServerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateWashServerInternalServerError creates CreateWashServerInternalServerError with default headers values
func NewCreateWashServerInternalServerError() *CreateWashServerInternalServerError {

	return &CreateWashServerInternalServerError{}
}

// WithPayload adds the payload to the create wash server internal server error response
func (o *CreateWashServerInternalServerError) WithPayload(payload *models.Error) *CreateWashServerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create wash server internal server error response
func (o *CreateWashServerInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWashServerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateWashServerInternalServerError) CreateWashServerResponder() {}

type CreateWashServerNotImplementedResponder struct {
	middleware.Responder
}

func (*CreateWashServerNotImplementedResponder) CreateWashServerResponder() {}

func CreateWashServerNotImplemented() CreateWashServerResponder {
	return &CreateWashServerNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.CreateWashServer has not yet been implemented",
		),
	}
}

type CreateWashServerResponder interface {
	middleware.Responder
	CreateWashServerResponder()
}
