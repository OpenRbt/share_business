// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserUpdate user update
//
// swagger:model UserUpdate
type UserUpdate struct {

	// role
	// Enum: [user admin engineer]
	Role string `json:"role,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *UserUpdate) UnmarshalJSON(data []byte) error {
	var props struct {

		// role
		// Enum: [user admin engineer]
		Role string `json:"role,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Role = props.Role
	return nil
}

// Validate validates this user update
func (m *UserUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userUpdateTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","engineer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userUpdateTypeRolePropEnum = append(userUpdateTypeRolePropEnum, v)
	}
}

const (

	// UserUpdateRoleUser captures enum value "user"
	UserUpdateRoleUser string = "user"

	// UserUpdateRoleAdmin captures enum value "admin"
	UserUpdateRoleAdmin string = "admin"

	// UserUpdateRoleEngineer captures enum value "engineer"
	UserUpdateRoleEngineer string = "engineer"
)

// prop value enum
func (m *UserUpdate) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userUpdateTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserUpdate) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user update based on context it is used
func (m *UserUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserUpdate) UnmarshalBinary(b []byte) error {
	var res UserUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
