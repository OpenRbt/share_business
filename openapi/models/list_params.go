// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListParams params for list method
//
// swagger:model listParams
type ListParams struct {

	// filter groups
	FilterGroups []*FilterGroup `json:"filterGroups"`

	// limit
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// offset
	// Minimum: 0
	Offset *int64 `json:"offset,omitempty"`

	// order by
	// Enum: [ASC DESC]
	OrderBy string `json:"orderBy,omitempty"`

	// sort by
	SortBy string `json:"sortBy,omitempty"`
}

// Validate validates this list params
func (m *ListParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListParams) validateFilterGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterGroups); i++ {
		if swag.IsZero(m.FilterGroups[i]) { // not required
			continue
		}

		if m.FilterGroups[i] != nil {
			if err := m.FilterGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filterGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListParams) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ListParams) validateOffset(formats strfmt.Registry) error {
	if swag.IsZero(m.Offset) { // not required
		return nil
	}

	if err := validate.MinimumInt("offset", "body", *m.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

var listParamsTypeOrderByPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listParamsTypeOrderByPropEnum = append(listParamsTypeOrderByPropEnum, v)
	}
}

const (

	// ListParamsOrderByASC captures enum value "ASC"
	ListParamsOrderByASC string = "ASC"

	// ListParamsOrderByDESC captures enum value "DESC"
	ListParamsOrderByDESC string = "DESC"
)

// prop value enum
func (m *ListParams) validateOrderByEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listParamsTypeOrderByPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListParams) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderByEnum("orderBy", "body", m.OrderBy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list params based on the context it is used
func (m *ListParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilterGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListParams) contextValidateFilterGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilterGroups); i++ {

		if m.FilterGroups[i] != nil {
			if err := m.FilterGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filterGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListParams) UnmarshalBinary(b []byte) error {
	var res ListParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
