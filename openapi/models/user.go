// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user profile
//
// swagger:model User
type User struct {

	// active
	Active bool `json:"active,omitempty"`

	// balance
	Balance int64 `json:"balance,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// role
	// Enum: [user admin engineer]
	Role string `json:"role,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *User) UnmarshalJSON(data []byte) error {
	var props struct {

		// active
		Active bool `json:"active,omitempty"`

		// balance
		Balance int64 `json:"balance,omitempty"`

		// id
		ID string `json:"id,omitempty"`

		// role
		// Enum: [user admin engineer]
		Role string `json:"role,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Active = props.Active
	m.Balance = props.Balance
	m.ID = props.ID
	m.Role = props.Role
	return nil
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","engineer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeRolePropEnum = append(userTypeRolePropEnum, v)
	}
}

const (

	// UserRoleUser captures enum value "user"
	UserRoleUser string = "user"

	// UserRoleAdmin captures enum value "admin"
	UserRoleAdmin string = "admin"

	// UserRoleEngineer captures enum value "engineer"
	UserRoleEngineer string = "engineer"
)

// prop value enum
func (m *User) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
