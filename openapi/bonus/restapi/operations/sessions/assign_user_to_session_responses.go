// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washbonus/openapi/bonus/models"
)

// AssignUserToSessionNoContentCode is the HTTP code returned for type AssignUserToSessionNoContent
const AssignUserToSessionNoContentCode int = 204

/*
AssignUserToSessionNoContent OK

swagger:response assignUserToSessionNoContent
*/
type AssignUserToSessionNoContent struct {
}

// NewAssignUserToSessionNoContent creates AssignUserToSessionNoContent with default headers values
func NewAssignUserToSessionNoContent() *AssignUserToSessionNoContent {

	return &AssignUserToSessionNoContent{}
}

// WriteResponse to the client
func (o *AssignUserToSessionNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *AssignUserToSessionNoContent) AssignUserToSessionResponder() {}

/*
AssignUserToSessionDefault Generic error response

swagger:response assignUserToSessionDefault
*/
type AssignUserToSessionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAssignUserToSessionDefault creates AssignUserToSessionDefault with default headers values
func NewAssignUserToSessionDefault(code int) *AssignUserToSessionDefault {
	if code <= 0 {
		code = 500
	}

	return &AssignUserToSessionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the assign user to session default response
func (o *AssignUserToSessionDefault) WithStatusCode(code int) *AssignUserToSessionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the assign user to session default response
func (o *AssignUserToSessionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the assign user to session default response
func (o *AssignUserToSessionDefault) WithPayload(payload *models.Error) *AssignUserToSessionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign user to session default response
func (o *AssignUserToSessionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignUserToSessionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AssignUserToSessionDefault) AssignUserToSessionResponder() {}

type AssignUserToSessionNotImplementedResponder struct {
	middleware.Responder
}

func (*AssignUserToSessionNotImplementedResponder) AssignUserToSessionResponder() {}

func AssignUserToSessionNotImplemented() AssignUserToSessionResponder {
	return &AssignUserToSessionNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.AssignUserToSession has not yet been implemented",
		),
	}
}

type AssignUserToSessionResponder interface {
	middleware.Responder
	AssignUserToSessionResponder()
}
