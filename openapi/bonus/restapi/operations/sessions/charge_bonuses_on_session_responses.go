// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washbonus/openapi/bonus/models"
)

// ChargeBonusesOnSessionOKCode is the HTTP code returned for type ChargeBonusesOnSessionOK
const ChargeBonusesOnSessionOKCode int = 200

/*
ChargeBonusesOnSessionOK OK

swagger:response chargeBonusesOnSessionOK
*/
type ChargeBonusesOnSessionOK struct {

	/*
	  In: Body
	*/
	Payload *models.BonusCharge `json:"body,omitempty"`
}

// NewChargeBonusesOnSessionOK creates ChargeBonusesOnSessionOK with default headers values
func NewChargeBonusesOnSessionOK() *ChargeBonusesOnSessionOK {

	return &ChargeBonusesOnSessionOK{}
}

// WithPayload adds the payload to the charge bonuses on session o k response
func (o *ChargeBonusesOnSessionOK) WithPayload(payload *models.BonusCharge) *ChargeBonusesOnSessionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the charge bonuses on session o k response
func (o *ChargeBonusesOnSessionOK) SetPayload(payload *models.BonusCharge) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChargeBonusesOnSessionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *ChargeBonusesOnSessionOK) ChargeBonusesOnSessionResponder() {}

/*
ChargeBonusesOnSessionDefault Generic error response

swagger:response chargeBonusesOnSessionDefault
*/
type ChargeBonusesOnSessionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewChargeBonusesOnSessionDefault creates ChargeBonusesOnSessionDefault with default headers values
func NewChargeBonusesOnSessionDefault(code int) *ChargeBonusesOnSessionDefault {
	if code <= 0 {
		code = 500
	}

	return &ChargeBonusesOnSessionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the charge bonuses on session default response
func (o *ChargeBonusesOnSessionDefault) WithStatusCode(code int) *ChargeBonusesOnSessionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the charge bonuses on session default response
func (o *ChargeBonusesOnSessionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the charge bonuses on session default response
func (o *ChargeBonusesOnSessionDefault) WithPayload(payload *models.Error) *ChargeBonusesOnSessionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the charge bonuses on session default response
func (o *ChargeBonusesOnSessionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChargeBonusesOnSessionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *ChargeBonusesOnSessionDefault) ChargeBonusesOnSessionResponder() {}

type ChargeBonusesOnSessionNotImplementedResponder struct {
	middleware.Responder
}

func (*ChargeBonusesOnSessionNotImplementedResponder) ChargeBonusesOnSessionResponder() {}

func ChargeBonusesOnSessionNotImplemented() ChargeBonusesOnSessionResponder {
	return &ChargeBonusesOnSessionNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.ChargeBonusesOnSession has not yet been implemented",
		),
	}
}

type ChargeBonusesOnSessionResponder interface {
	middleware.Responder
	ChargeBonusesOnSessionResponder()
}
