// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wallet wallet
//
// swagger:model Wallet
type Wallet struct {

	// balance
	// Required: true
	Balance *int64 `json:"balance"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// organization
	// Required: true
	Organization *Organization `json:"organization"`

	// pending balance
	// Required: true
	PendingBalance *int64 `json:"pendingBalance"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Wallet) UnmarshalJSON(data []byte) error {
	var props struct {

		// balance
		// Required: true
		Balance *int64 `json:"balance"`

		// id
		// Required: true
		// Format: uuid
		ID *strfmt.UUID `json:"id"`

		// organization
		// Required: true
		Organization *Organization `json:"organization"`

		// pending balance
		// Required: true
		PendingBalance *int64 `json:"pendingBalance"`

		// user Id
		// Required: true
		UserID *string `json:"userId"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Balance = props.Balance
	m.ID = props.ID
	m.Organization = props.Organization
	m.PendingBalance = props.PendingBalance
	m.UserID = props.UserID
	return nil
}

// Validate validates this wallet
func (m *Wallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateOrganization(formats strfmt.Registry) error {

	if err := validate.Required("organization", "body", m.Organization); err != nil {
		return err
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *Wallet) validatePendingBalance(formats strfmt.Registry) error {

	if err := validate.Required("pendingBalance", "body", m.PendingBalance); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wallet based on the context it is used
func (m *Wallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wallet) UnmarshalBinary(b []byte) error {
	var res Wallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
