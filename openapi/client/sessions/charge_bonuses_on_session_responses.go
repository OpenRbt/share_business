// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// ChargeBonusesOnSessionReader is a Reader for the ChargeBonusesOnSession structure.
type ChargeBonusesOnSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChargeBonusesOnSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChargeBonusesOnSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewChargeBonusesOnSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChargeBonusesOnSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewChargeBonusesOnSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sessions/{id}/bonuses] chargeBonusesOnSession", response, response.Code())
	}
}

// NewChargeBonusesOnSessionOK creates a ChargeBonusesOnSessionOK with default headers values
func NewChargeBonusesOnSessionOK() *ChargeBonusesOnSessionOK {
	return &ChargeBonusesOnSessionOK{}
}

/*
ChargeBonusesOnSessionOK describes a response with status code 200, with default header values.

OK
*/
type ChargeBonusesOnSessionOK struct {
	Payload *models.BonusCharge
}

// IsSuccess returns true when this charge bonuses on session o k response has a 2xx status code
func (o *ChargeBonusesOnSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this charge bonuses on session o k response has a 3xx status code
func (o *ChargeBonusesOnSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this charge bonuses on session o k response has a 4xx status code
func (o *ChargeBonusesOnSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this charge bonuses on session o k response has a 5xx status code
func (o *ChargeBonusesOnSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this charge bonuses on session o k response a status code equal to that given
func (o *ChargeBonusesOnSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the charge bonuses on session o k response
func (o *ChargeBonusesOnSessionOK) Code() int {
	return 200
}

func (o *ChargeBonusesOnSessionOK) Error() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionOK  %+v", 200, o.Payload)
}

func (o *ChargeBonusesOnSessionOK) String() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionOK  %+v", 200, o.Payload)
}

func (o *ChargeBonusesOnSessionOK) GetPayload() *models.BonusCharge {
	return o.Payload
}

func (o *ChargeBonusesOnSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BonusCharge)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChargeBonusesOnSessionForbidden creates a ChargeBonusesOnSessionForbidden with default headers values
func NewChargeBonusesOnSessionForbidden() *ChargeBonusesOnSessionForbidden {
	return &ChargeBonusesOnSessionForbidden{}
}

/*
ChargeBonusesOnSessionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ChargeBonusesOnSessionForbidden struct {
}

// IsSuccess returns true when this charge bonuses on session forbidden response has a 2xx status code
func (o *ChargeBonusesOnSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this charge bonuses on session forbidden response has a 3xx status code
func (o *ChargeBonusesOnSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this charge bonuses on session forbidden response has a 4xx status code
func (o *ChargeBonusesOnSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this charge bonuses on session forbidden response has a 5xx status code
func (o *ChargeBonusesOnSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this charge bonuses on session forbidden response a status code equal to that given
func (o *ChargeBonusesOnSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the charge bonuses on session forbidden response
func (o *ChargeBonusesOnSessionForbidden) Code() int {
	return 403
}

func (o *ChargeBonusesOnSessionForbidden) Error() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionForbidden ", 403)
}

func (o *ChargeBonusesOnSessionForbidden) String() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionForbidden ", 403)
}

func (o *ChargeBonusesOnSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargeBonusesOnSessionNotFound creates a ChargeBonusesOnSessionNotFound with default headers values
func NewChargeBonusesOnSessionNotFound() *ChargeBonusesOnSessionNotFound {
	return &ChargeBonusesOnSessionNotFound{}
}

/*
ChargeBonusesOnSessionNotFound describes a response with status code 404, with default header values.

Session not found
*/
type ChargeBonusesOnSessionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this charge bonuses on session not found response has a 2xx status code
func (o *ChargeBonusesOnSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this charge bonuses on session not found response has a 3xx status code
func (o *ChargeBonusesOnSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this charge bonuses on session not found response has a 4xx status code
func (o *ChargeBonusesOnSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this charge bonuses on session not found response has a 5xx status code
func (o *ChargeBonusesOnSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this charge bonuses on session not found response a status code equal to that given
func (o *ChargeBonusesOnSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the charge bonuses on session not found response
func (o *ChargeBonusesOnSessionNotFound) Code() int {
	return 404
}

func (o *ChargeBonusesOnSessionNotFound) Error() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionNotFound  %+v", 404, o.Payload)
}

func (o *ChargeBonusesOnSessionNotFound) String() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionNotFound  %+v", 404, o.Payload)
}

func (o *ChargeBonusesOnSessionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChargeBonusesOnSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChargeBonusesOnSessionInternalServerError creates a ChargeBonusesOnSessionInternalServerError with default headers values
func NewChargeBonusesOnSessionInternalServerError() *ChargeBonusesOnSessionInternalServerError {
	return &ChargeBonusesOnSessionInternalServerError{}
}

/*
ChargeBonusesOnSessionInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type ChargeBonusesOnSessionInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this charge bonuses on session internal server error response has a 2xx status code
func (o *ChargeBonusesOnSessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this charge bonuses on session internal server error response has a 3xx status code
func (o *ChargeBonusesOnSessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this charge bonuses on session internal server error response has a 4xx status code
func (o *ChargeBonusesOnSessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this charge bonuses on session internal server error response has a 5xx status code
func (o *ChargeBonusesOnSessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this charge bonuses on session internal server error response a status code equal to that given
func (o *ChargeBonusesOnSessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the charge bonuses on session internal server error response
func (o *ChargeBonusesOnSessionInternalServerError) Code() int {
	return 500
}

func (o *ChargeBonusesOnSessionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *ChargeBonusesOnSessionInternalServerError) String() string {
	return fmt.Sprintf("[POST /sessions/{id}/bonuses][%d] chargeBonusesOnSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *ChargeBonusesOnSessionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChargeBonusesOnSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
