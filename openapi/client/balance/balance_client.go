// Code generated by go-swagger; DO NOT EDIT.

package balance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new balance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for balance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBalance(params *AddBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBalanceCreated, error)

	DeleteBalance(params *DeleteBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBalanceNoContent, error)

	EditBalance(params *EditBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditBalanceOK, error)

	GetBalance(params *GetBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBalanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddBalance add balance API
*/
func (a *Client) AddBalance(params *AddBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBalanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBalance",
		Method:             "POST",
		PathPattern:        "/balance/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBalanceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBalance delete balance API
*/
func (a *Client) DeleteBalance(params *DeleteBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBalanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBalance",
		Method:             "DELETE",
		PathPattern:        "/balance/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBalanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EditBalance edit balance API
*/
func (a *Client) EditBalance(params *EditBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editBalance",
		Method:             "PUT",
		PathPattern:        "/balance/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBalance get balance API
*/
func (a *Client) GetBalance(params *GetBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBalance",
		Method:             "POST",
		PathPattern:        "/balance/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
