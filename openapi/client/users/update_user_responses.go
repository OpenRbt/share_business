// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateUserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /users/{id}] updateUser", response, response.Code())
	}
}

// NewUpdateUserNoContent creates a UpdateUserNoContent with default headers values
func NewUpdateUserNoContent() *UpdateUserNoContent {
	return &UpdateUserNoContent{}
}

/*
UpdateUserNoContent describes a response with status code 204, with default header values.

OK
*/
type UpdateUserNoContent struct {
}

// IsSuccess returns true when this update user no content response has a 2xx status code
func (o *UpdateUserNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user no content response has a 3xx status code
func (o *UpdateUserNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user no content response has a 4xx status code
func (o *UpdateUserNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user no content response has a 5xx status code
func (o *UpdateUserNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update user no content response a status code equal to that given
func (o *UpdateUserNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update user no content response
func (o *UpdateUserNoContent) Code() int {
	return 204
}

func (o *UpdateUserNoContent) Error() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserNoContent ", 204)
}

func (o *UpdateUserNoContent) String() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserNoContent ", 204)
}

func (o *UpdateUserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserForbidden creates a UpdateUserForbidden with default headers values
func NewUpdateUserForbidden() *UpdateUserForbidden {
	return &UpdateUserForbidden{}
}

/*
UpdateUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserForbidden struct {
}

// IsSuccess returns true when this update user forbidden response has a 2xx status code
func (o *UpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user forbidden response has a 3xx status code
func (o *UpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user forbidden response has a 4xx status code
func (o *UpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user forbidden response has a 5xx status code
func (o *UpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user forbidden response a status code equal to that given
func (o *UpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user forbidden response
func (o *UpdateUserForbidden) Code() int {
	return 403
}

func (o *UpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserForbidden ", 403)
}

func (o *UpdateUserForbidden) String() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserForbidden ", 403)
}

func (o *UpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*
UpdateUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user not found response has a 2xx status code
func (o *UpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user not found response has a 3xx status code
func (o *UpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user not found response has a 4xx status code
func (o *UpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user not found response has a 5xx status code
func (o *UpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user not found response a status code equal to that given
func (o *UpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user not found response
func (o *UpdateUserNotFound) Code() int {
	return 404
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) String() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserInternalServerError creates a UpdateUserInternalServerError with default headers values
func NewUpdateUserInternalServerError() *UpdateUserInternalServerError {
	return &UpdateUserInternalServerError{}
}

/*
UpdateUserInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UpdateUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user internal server error response has a 2xx status code
func (o *UpdateUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user internal server error response has a 3xx status code
func (o *UpdateUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user internal server error response has a 4xx status code
func (o *UpdateUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user internal server error response has a 5xx status code
func (o *UpdateUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user internal server error response a status code equal to that given
func (o *UpdateUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update user internal server error response
func (o *UpdateUserInternalServerError) Code() int {
	return 500
}

func (o *UpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /users/{id}][%d] updateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
