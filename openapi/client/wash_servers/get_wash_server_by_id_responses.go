// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// GetWashServerByIDReader is a Reader for the GetWashServerByID structure.
type GetWashServerByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWashServerByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWashServerByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWashServerByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWashServerByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWashServerByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWashServerByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /wash-servers/{id}] getWashServerById", response, response.Code())
	}
}

// NewGetWashServerByIDOK creates a GetWashServerByIDOK with default headers values
func NewGetWashServerByIDOK() *GetWashServerByIDOK {
	return &GetWashServerByIDOK{}
}

/*
GetWashServerByIDOK describes a response with status code 200, with default header values.

OK
*/
type GetWashServerByIDOK struct {
	Payload *models.WashServer
}

// IsSuccess returns true when this get wash server by Id o k response has a 2xx status code
func (o *GetWashServerByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get wash server by Id o k response has a 3xx status code
func (o *GetWashServerByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get wash server by Id o k response has a 4xx status code
func (o *GetWashServerByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get wash server by Id o k response has a 5xx status code
func (o *GetWashServerByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get wash server by Id o k response a status code equal to that given
func (o *GetWashServerByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get wash server by Id o k response
func (o *GetWashServerByIDOK) Code() int {
	return 200
}

func (o *GetWashServerByIDOK) Error() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdOK  %+v", 200, o.Payload)
}

func (o *GetWashServerByIDOK) String() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdOK  %+v", 200, o.Payload)
}

func (o *GetWashServerByIDOK) GetPayload() *models.WashServer {
	return o.Payload
}

func (o *GetWashServerByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WashServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWashServerByIDBadRequest creates a GetWashServerByIDBadRequest with default headers values
func NewGetWashServerByIDBadRequest() *GetWashServerByIDBadRequest {
	return &GetWashServerByIDBadRequest{}
}

/*
GetWashServerByIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetWashServerByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get wash server by Id bad request response has a 2xx status code
func (o *GetWashServerByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get wash server by Id bad request response has a 3xx status code
func (o *GetWashServerByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get wash server by Id bad request response has a 4xx status code
func (o *GetWashServerByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get wash server by Id bad request response has a 5xx status code
func (o *GetWashServerByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get wash server by Id bad request response a status code equal to that given
func (o *GetWashServerByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get wash server by Id bad request response
func (o *GetWashServerByIDBadRequest) Code() int {
	return 400
}

func (o *GetWashServerByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetWashServerByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetWashServerByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWashServerByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWashServerByIDForbidden creates a GetWashServerByIDForbidden with default headers values
func NewGetWashServerByIDForbidden() *GetWashServerByIDForbidden {
	return &GetWashServerByIDForbidden{}
}

/*
GetWashServerByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWashServerByIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get wash server by Id forbidden response has a 2xx status code
func (o *GetWashServerByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get wash server by Id forbidden response has a 3xx status code
func (o *GetWashServerByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get wash server by Id forbidden response has a 4xx status code
func (o *GetWashServerByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get wash server by Id forbidden response has a 5xx status code
func (o *GetWashServerByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get wash server by Id forbidden response a status code equal to that given
func (o *GetWashServerByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get wash server by Id forbidden response
func (o *GetWashServerByIDForbidden) Code() int {
	return 403
}

func (o *GetWashServerByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetWashServerByIDForbidden) String() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetWashServerByIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWashServerByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWashServerByIDNotFound creates a GetWashServerByIDNotFound with default headers values
func NewGetWashServerByIDNotFound() *GetWashServerByIDNotFound {
	return &GetWashServerByIDNotFound{}
}

/*
GetWashServerByIDNotFound describes a response with status code 404, with default header values.

WashServer not exists
*/
type GetWashServerByIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get wash server by Id not found response has a 2xx status code
func (o *GetWashServerByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get wash server by Id not found response has a 3xx status code
func (o *GetWashServerByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get wash server by Id not found response has a 4xx status code
func (o *GetWashServerByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get wash server by Id not found response has a 5xx status code
func (o *GetWashServerByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get wash server by Id not found response a status code equal to that given
func (o *GetWashServerByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get wash server by Id not found response
func (o *GetWashServerByIDNotFound) Code() int {
	return 404
}

func (o *GetWashServerByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetWashServerByIDNotFound) String() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetWashServerByIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWashServerByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWashServerByIDInternalServerError creates a GetWashServerByIDInternalServerError with default headers values
func NewGetWashServerByIDInternalServerError() *GetWashServerByIDInternalServerError {
	return &GetWashServerByIDInternalServerError{}
}

/*
GetWashServerByIDInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type GetWashServerByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get wash server by Id internal server error response has a 2xx status code
func (o *GetWashServerByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get wash server by Id internal server error response has a 3xx status code
func (o *GetWashServerByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get wash server by Id internal server error response has a 4xx status code
func (o *GetWashServerByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get wash server by Id internal server error response has a 5xx status code
func (o *GetWashServerByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get wash server by Id internal server error response a status code equal to that given
func (o *GetWashServerByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get wash server by Id internal server error response
func (o *GetWashServerByIDInternalServerError) Code() int {
	return 500
}

func (o *GetWashServerByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWashServerByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /wash-servers/{id}][%d] getWashServerByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWashServerByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWashServerByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
