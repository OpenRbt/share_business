// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// UpdateWashServerReader is a Reader for the UpdateWashServer structure.
type UpdateWashServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWashServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWashServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateWashServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateWashServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateWashServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateWashServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /wash-servers/{id}] updateWashServer", response, response.Code())
	}
}

// NewUpdateWashServerOK creates a UpdateWashServerOK with default headers values
func NewUpdateWashServerOK() *UpdateWashServerOK {
	return &UpdateWashServerOK{}
}

/*
UpdateWashServerOK describes a response with status code 200, with default header values.

Success update
*/
type UpdateWashServerOK struct {
	Payload *models.WashServer
}

// IsSuccess returns true when this update wash server o k response has a 2xx status code
func (o *UpdateWashServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update wash server o k response has a 3xx status code
func (o *UpdateWashServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update wash server o k response has a 4xx status code
func (o *UpdateWashServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update wash server o k response has a 5xx status code
func (o *UpdateWashServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update wash server o k response a status code equal to that given
func (o *UpdateWashServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update wash server o k response
func (o *UpdateWashServerOK) Code() int {
	return 200
}

func (o *UpdateWashServerOK) Error() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerOK  %+v", 200, o.Payload)
}

func (o *UpdateWashServerOK) String() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerOK  %+v", 200, o.Payload)
}

func (o *UpdateWashServerOK) GetPayload() *models.WashServer {
	return o.Payload
}

func (o *UpdateWashServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WashServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWashServerBadRequest creates a UpdateWashServerBadRequest with default headers values
func NewUpdateWashServerBadRequest() *UpdateWashServerBadRequest {
	return &UpdateWashServerBadRequest{}
}

/*
UpdateWashServerBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateWashServerBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update wash server bad request response has a 2xx status code
func (o *UpdateWashServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update wash server bad request response has a 3xx status code
func (o *UpdateWashServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update wash server bad request response has a 4xx status code
func (o *UpdateWashServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update wash server bad request response has a 5xx status code
func (o *UpdateWashServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update wash server bad request response a status code equal to that given
func (o *UpdateWashServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update wash server bad request response
func (o *UpdateWashServerBadRequest) Code() int {
	return 400
}

func (o *UpdateWashServerBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWashServerBadRequest) String() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWashServerBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWashServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWashServerForbidden creates a UpdateWashServerForbidden with default headers values
func NewUpdateWashServerForbidden() *UpdateWashServerForbidden {
	return &UpdateWashServerForbidden{}
}

/*
UpdateWashServerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateWashServerForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update wash server forbidden response has a 2xx status code
func (o *UpdateWashServerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update wash server forbidden response has a 3xx status code
func (o *UpdateWashServerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update wash server forbidden response has a 4xx status code
func (o *UpdateWashServerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update wash server forbidden response has a 5xx status code
func (o *UpdateWashServerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update wash server forbidden response a status code equal to that given
func (o *UpdateWashServerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update wash server forbidden response
func (o *UpdateWashServerForbidden) Code() int {
	return 403
}

func (o *UpdateWashServerForbidden) Error() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWashServerForbidden) String() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWashServerForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWashServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWashServerNotFound creates a UpdateWashServerNotFound with default headers values
func NewUpdateWashServerNotFound() *UpdateWashServerNotFound {
	return &UpdateWashServerNotFound{}
}

/*
UpdateWashServerNotFound describes a response with status code 404, with default header values.

WashServer not exists
*/
type UpdateWashServerNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update wash server not found response has a 2xx status code
func (o *UpdateWashServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update wash server not found response has a 3xx status code
func (o *UpdateWashServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update wash server not found response has a 4xx status code
func (o *UpdateWashServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update wash server not found response has a 5xx status code
func (o *UpdateWashServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update wash server not found response a status code equal to that given
func (o *UpdateWashServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update wash server not found response
func (o *UpdateWashServerNotFound) Code() int {
	return 404
}

func (o *UpdateWashServerNotFound) Error() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWashServerNotFound) String() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWashServerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWashServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWashServerInternalServerError creates a UpdateWashServerInternalServerError with default headers values
func NewUpdateWashServerInternalServerError() *UpdateWashServerInternalServerError {
	return &UpdateWashServerInternalServerError{}
}

/*
UpdateWashServerInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UpdateWashServerInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update wash server internal server error response has a 2xx status code
func (o *UpdateWashServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update wash server internal server error response has a 3xx status code
func (o *UpdateWashServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update wash server internal server error response has a 4xx status code
func (o *UpdateWashServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update wash server internal server error response has a 5xx status code
func (o *UpdateWashServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update wash server internal server error response a status code equal to that given
func (o *UpdateWashServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update wash server internal server error response
func (o *UpdateWashServerInternalServerError) Code() int {
	return 500
}

func (o *UpdateWashServerInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateWashServerInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /wash-servers/{id}][%d] updateWashServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateWashServerInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWashServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
