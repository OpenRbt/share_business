// Code generated by mtgroup-generator.
package dal

import (
	"database/sql"
	"time"
	"wash-bonus/internal/app"
	"wash-bonus/internal/app/entity"
	"wash-bonus/internal/app/entity/vo"
	"wash-bonus/internal/dal/dbmodel"
	"wash-bonus/internal/dto"

	uuid "github.com/satori/go.uuid"
)

func (r *Repo) GetWashServer(id string) (*entity.WashServer, error) {
	var m dbmodel.WashServer

	err := r.db.NamedGet(&m, sqlGetWashServer, argGetWashServer{
		ID: id,
	})

	if err != nil {
		return nil, err
	}

	return dto.WashServerFromDB(m), nil
}

func (r *Repo) AddWashServer(s entity.WashServer) error {
	_, err := r.db.NamedExec(sqlAddWashServer, argAddWashServer{
		Name:        s.Name,
		Description: s.Description,
		OwnerID:     s.Owner.ID.String(),
		CreatedAt:   time.Now(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (r *Repo) EditWashServer(id string, update vo.WashServerUpdate, editedBy entity.User) error {
	valid := false
	if update.ServiceKey != "" {
		valid = true
	}
	res, err := r.db.NamedExec(sqlEditWashServer, argEditWashServer{
		ID: id,
		ServiceKey: sql.NullString{
			String: update.ServiceKey,
			Valid:  valid,
		},
		Name:        update.Name,
		Description: update.Description,
		OwnerID:     update.OwnerID.String(),
		ModifiedAt:  time.Now(),
		ModifiedBy:  uuid.NullUUID{UUID: editedBy.ID, Valid: true},
	})
	if err != nil {
		return err
	}

	if count, _ := res.RowsAffected(); count == 0 {
		return app.ErrNotFound
	}

	return nil
}

func (r *Repo) DeleteWashServer(id string, deletedBy entity.User) error {
	res, err := r.db.NamedExec(sqlDeleteWashServer, argDeleteWashServer{
		ID:        id,
		DeletedAt: time.Now(),
		DeletedBy: uuid.NullUUID{UUID: deletedBy.ID, Valid: true},
	})

	if err != nil {
		return err
	}

	if count, _ := res.RowsAffected(); count == 0 {
		return app.ErrNotFound
	}

	return nil
}

func (r *Repo) ListWashServers(filter vo.ListFilter) ([]entity.WashServer, []string, error) {
	ms := []dbmodel.WashServer{}
	warnings := []string{}

	err := r.db.NamedSelect(&ms, sqlListWashServer, argListWashServer{})
	if err != nil {
		return nil, nil, err
	}

	return dto.WashServersFromDB(ms), warnings, nil
}

func (r *Repo) GetWashServerByKey(key string) (*entity.WashServer, error) {
	var m dbmodel.WashServer

	err := r.db.NamedGet(&m, sqlGetWashServerByKey, argGetWashServerByKey{
		Key: key,
	})

	if err != nil {
		return nil, err
	}

	return dto.WashServerFromDB(m), nil
}
