// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WashServerServiceClient is the client API for WashServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WashServerServiceClient interface {
	InitConnection(ctx context.Context, in *InitConnectionRequest, opts ...grpc.CallOption) (*InitConnectionAnswer, error)
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionAnswer, error)
	UpdateSession(ctx context.Context, opts ...grpc.CallOption) (WashServerService_UpdateSessionClient, error)
	ConfirmSession(ctx context.Context, in *ConfirmSessionRequest, opts ...grpc.CallOption) (*ConfirmSessionAnswer, error)
	FinishSession(ctx context.Context, in *FinishSessionRequest, opts ...grpc.CallOption) (*FinishSessionAnswer, error)
}

type washServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWashServerServiceClient(cc grpc.ClientConnInterface) WashServerServiceClient {
	return &washServerServiceClient{cc}
}

func (c *washServerServiceClient) InitConnection(ctx context.Context, in *InitConnectionRequest, opts ...grpc.CallOption) (*InitConnectionAnswer, error) {
	out := new(InitConnectionAnswer)
	err := c.cc.Invoke(ctx, "/xgrpc.WashServerService/InitConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washServerServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionAnswer, error) {
	out := new(StartSessionAnswer)
	err := c.cc.Invoke(ctx, "/xgrpc.WashServerService/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washServerServiceClient) UpdateSession(ctx context.Context, opts ...grpc.CallOption) (WashServerService_UpdateSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &WashServerService_ServiceDesc.Streams[0], "/xgrpc.WashServerService/UpdateSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &washServerServiceUpdateSessionClient{stream}
	return x, nil
}

type WashServerService_UpdateSessionClient interface {
	Send(*UpdateSessionRequest) error
	Recv() (*UpdateSessionAnswer, error)
	grpc.ClientStream
}

type washServerServiceUpdateSessionClient struct {
	grpc.ClientStream
}

func (x *washServerServiceUpdateSessionClient) Send(m *UpdateSessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *washServerServiceUpdateSessionClient) Recv() (*UpdateSessionAnswer, error) {
	m := new(UpdateSessionAnswer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *washServerServiceClient) ConfirmSession(ctx context.Context, in *ConfirmSessionRequest, opts ...grpc.CallOption) (*ConfirmSessionAnswer, error) {
	out := new(ConfirmSessionAnswer)
	err := c.cc.Invoke(ctx, "/xgrpc.WashServerService/ConfirmSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washServerServiceClient) FinishSession(ctx context.Context, in *FinishSessionRequest, opts ...grpc.CallOption) (*FinishSessionAnswer, error) {
	out := new(FinishSessionAnswer)
	err := c.cc.Invoke(ctx, "/xgrpc.WashServerService/FinishSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WashServerServiceServer is the server API for WashServerService service.
// All implementations must embed UnimplementedWashServerServiceServer
// for forward compatibility
type WashServerServiceServer interface {
	InitConnection(context.Context, *InitConnectionRequest) (*InitConnectionAnswer, error)
	StartSession(context.Context, *StartSessionRequest) (*StartSessionAnswer, error)
	UpdateSession(WashServerService_UpdateSessionServer) error
	ConfirmSession(context.Context, *ConfirmSessionRequest) (*ConfirmSessionAnswer, error)
	FinishSession(context.Context, *FinishSessionRequest) (*FinishSessionAnswer, error)
	mustEmbedUnimplementedWashServerServiceServer()
}

// UnimplementedWashServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWashServerServiceServer struct {
}

func (UnimplementedWashServerServiceServer) InitConnection(context.Context, *InitConnectionRequest) (*InitConnectionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitConnection not implemented")
}
func (UnimplementedWashServerServiceServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedWashServerServiceServer) UpdateSession(WashServerService_UpdateSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedWashServerServiceServer) ConfirmSession(context.Context, *ConfirmSessionRequest) (*ConfirmSessionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSession not implemented")
}
func (UnimplementedWashServerServiceServer) FinishSession(context.Context, *FinishSessionRequest) (*FinishSessionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSession not implemented")
}
func (UnimplementedWashServerServiceServer) mustEmbedUnimplementedWashServerServiceServer() {}

// UnsafeWashServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WashServerServiceServer will
// result in compilation errors.
type UnsafeWashServerServiceServer interface {
	mustEmbedUnimplementedWashServerServiceServer()
}

func RegisterWashServerServiceServer(s grpc.ServiceRegistrar, srv WashServerServiceServer) {
	s.RegisterService(&WashServerService_ServiceDesc, srv)
}

func _WashServerService_InitConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServerServiceServer).InitConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpc.WashServerService/InitConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServerServiceServer).InitConnection(ctx, req.(*InitConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashServerService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServerServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpc.WashServerService/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServerServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashServerService_UpdateSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WashServerServiceServer).UpdateSession(&washServerServiceUpdateSessionServer{stream})
}

type WashServerService_UpdateSessionServer interface {
	Send(*UpdateSessionAnswer) error
	Recv() (*UpdateSessionRequest, error)
	grpc.ServerStream
}

type washServerServiceUpdateSessionServer struct {
	grpc.ServerStream
}

func (x *washServerServiceUpdateSessionServer) Send(m *UpdateSessionAnswer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *washServerServiceUpdateSessionServer) Recv() (*UpdateSessionRequest, error) {
	m := new(UpdateSessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WashServerService_ConfirmSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServerServiceServer).ConfirmSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpc.WashServerService/ConfirmSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServerServiceServer).ConfirmSession(ctx, req.(*ConfirmSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashServerService_FinishSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServerServiceServer).FinishSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpc.WashServerService/FinishSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServerServiceServer).FinishSession(ctx, req.(*FinishSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WashServerService_ServiceDesc is the grpc.ServiceDesc for WashServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WashServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xgrpc.WashServerService",
	HandlerType: (*WashServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitConnection",
			Handler:    _WashServerService_InitConnection_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _WashServerService_StartSession_Handler,
		},
		{
			MethodName: "ConfirmSession",
			Handler:    _WashServerService_ConfirmSession_Handler,
		},
		{
			MethodName: "FinishSession",
			Handler:    _WashServerService_FinishSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateSession",
			Handler:       _WashServerService_UpdateSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/transport/grpc/grpc.proto",
}
